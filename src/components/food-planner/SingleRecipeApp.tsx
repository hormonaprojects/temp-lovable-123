
import { useState, useEffect } from "react";
import { MealTypeSelector } from "./MealTypeSelector";
import { CategoryIngredientSelector } from "./CategoryIngredientSelector";
import { RecipeDisplay } from "./RecipeDisplay";
import { Button } from "@/components/ui/button";
import { Recipe } from "@/types/recipe";
import { useToast } from "@/hooks/use-toast";
import { useSupabaseData } from "@/hooks/useSupabaseData";

interface SingleRecipeAppProps {
  user: any;
  onToggleDailyPlanner: () => void;
}

export function SingleRecipeApp({ user, onToggleDailyPlanner }: SingleRecipeAppProps) {
  const [selectedMealType, setSelectedMealType] = useState("");
  const [currentRecipe, setCurrentRecipe] = useState<Recipe | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastSearchParams, setLastSearchParams] = useState<{
    category: string;
    ingredient: string;
    mealType: string;
  }>({ category: "", ingredient: "", mealType: "" });
  const { toast } = useToast();
  
  const { 
    categories, 
    mealTypes, 
    loading: dataLoading, 
    getRecipesByMealType,
    getRecipesByCategory,
    getRandomRecipe,
    convertToStandardRecipe
  } = useSupabaseData();

  const getRecipe = async (category: string, ingredient: string) => {
    if (!selectedMealType) return;

    setIsLoading(true);
    setCurrentRecipe(null);
    
    // Elt√°roljuk a keres√©si param√©tereket - BELE√âRTVE az √©tkez√©si t√≠pust is!
    setLastSearchParams({ category, ingredient, mealType: selectedMealType });

    try {
      console.log('üîç SZIGOR√ö recept keres√©se:', { selectedMealType, category, ingredient });
      
      let foundRecipes = [];

      if (category && ingredient) {
        // Specifikus kateg√≥ria √©s hozz√°val√≥ alapj√°n - √âTKEZ√âSI T√çPUSSAL SZ≈∞RVE
        foundRecipes = getRecipesByCategory(category, ingredient, selectedMealType);
        console.log(`üéØ Specifikus keres√©s eredm√©nye: ${foundRecipes.length} recept`);
      } else if (category) {
        // Csak kateg√≥ria alapj√°n - √âTKEZ√âSI T√çPUSSAL SZ≈∞RVE
        foundRecipes = getRecipesByCategory(category, undefined, selectedMealType);
        console.log(`üéØ Kateg√≥ria keres√©s eredm√©nye: ${foundRecipes.length} recept`);
      } else {
        // Random recept az √©tkez√©s t√≠pus alapj√°n
        foundRecipes = getRecipesByMealType(selectedMealType);
        console.log(`üéØ √âtkez√©si t√≠pus keres√©s eredm√©nye: ${foundRecipes.length} recept`);
      }

      // Ha nincs tal√°lat, NE pr√≥b√°ljunk random receptet - maradjunk szigor√∫ak
      if (foundRecipes.length > 0) {
        // Random kiv√°laszt√°s a tal√°latok k√∂z√ºl
        const randomIndex = Math.floor(Math.random() * foundRecipes.length);
        const selectedSupabaseRecipe = foundRecipes[randomIndex];
        const standardRecipe = convertToStandardRecipe(selectedSupabaseRecipe);
        
        setCurrentRecipe(standardRecipe);
        
        toast({
          title: "Recept bet√∂ltve!",
          description: `${standardRecipe.n√©v} sikeresen bet√∂ltve az adatb√°zisb√≥l.`,
        });
      } else {
        toast({
          title: "Nincs tal√°lat",
          description: "Nem tal√°lhat√≥ recept a megadott felt√©telekkel ehhez az √©tkez√©si t√≠pushoz.",
          variant: "destructive"
        });
      }

    } catch (error) {
      console.error('‚ùå Hiba a recept k√©r√©sekor:', error);
      toast({
        title: "Hiba",
        description: "Nem siker√ºlt bet√∂lteni a receptet az adatb√°zisb√≥l.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const regenerateRecipe = () => {
    if (selectedMealType) {
      // Ugyanazokkal a param√©terekkel keres√ºnk √∫jra - BELE√âRTVE az √©tkez√©si t√≠pust is!
      console.log('üîÑ √öjragener√°l√°s ugyanazokkal a param√©terekkel:', lastSearchParams);
      getRecipe(lastSearchParams.category, lastSearchParams.ingredient);
    }
  };

  const resetForm = () => {
    setSelectedMealType("");
    setCurrentRecipe(null);
    setLastSearchParams({ category: "", ingredient: "", mealType: "" });
  };

  // Adatstrukt√∫ra el≈ëk√©sz√≠t√©se a komponensek sz√°m√°ra
  const foodData = {
    mealTypes: mealTypes,
    categories: categories
  };

  console.log('üóÇÔ∏è FoodData √°tadva komponenseknek:', foodData);

  if (dataLoading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-16 w-16 border-4 border-white border-t-transparent mx-auto mb-4"></div>
        <div className="text-white text-xl font-semibold">Adatok bet√∂lt√©se az adatb√°zisb√≥l...</div>
        <div className="text-white/70 mt-2">K√©rj√ºk v√°rjon...</div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold text-white mb-4">üçΩÔ∏è √âteltervez≈ë</h1>
        <p className="text-white/80 text-lg">V√°lassz √©tkez√©st √©s k√©sz√≠ts finom √©teleket!</p>
      </div>

      <div className="flex justify-center gap-4 mb-8">
        <Button
          onClick={resetForm}
          className="bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300"
        >
          üîÑ √öj v√°laszt√°s
        </Button>
        <Button
          onClick={onToggleDailyPlanner}
          className="bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300"
        >
          üìÖ Napi √©trendtervez≈ë
        </Button>
      </div>

      <MealTypeSelector
        selectedMealType={selectedMealType}
        onSelectMealType={setSelectedMealType}
        foodData={foodData}
      />

      {selectedMealType && (
        <CategoryIngredientSelector
          selectedMealType={selectedMealType}
          foodData={foodData}
          onGetRecipe={getRecipe}
        />
      )}

      <RecipeDisplay
        recipe={currentRecipe}
        isLoading={isLoading}
        onRegenerate={regenerateRecipe}
        onNewRecipe={resetForm}
      />
    </div>
  );
}
