
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";

interface User {
  id: string;
  email: string;
  fullName: string;
}

interface DailyMealPlannerProps {
  user: User;
}

interface MealPlan {
  [key: string]: {
    mealType: string;
    recipe: {
      n√©v: string;
      hozz√°val√≥k: string[];
      elk√©sz√≠t√©s: string;
      elk√©sz√≠t√©siId≈ë: string;
      sz√©nhidr√°t: string;
      feh√©rje: string;
      zs√≠r: string;
      k√©pUrl?: string;
    } | null;
  };
}

export function DailyMealPlanner({ user }: DailyMealPlannerProps) {
  const [selectedMeals, setSelectedMeals] = useState<string[]>(["reggeli", "eb√©d", "vacsora"]);
  const [dailyPlan, setDailyPlan] = useState<MealPlan>({});
  const [isGenerating, setIsGenerating] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const { toast } = useToast();

  const mealOptions = [
    { key: "reggeli", label: "üåÖ Reggeli" },
    { key: "tiz√≥rai", label: "‚òï T√≠z√≥rai" },
    { key: "eb√©d", label: "üçõ Eb√©d" },
    { key: "uzsonna", label: "ü•® Uzsonna" },
    { key: "vacsora", label: "üåô Vacsora" }
  ];

  const handleMealToggle = (mealKey: string) => {
    setSelectedMeals(prev => 
      prev.includes(mealKey) 
        ? prev.filter(m => m !== mealKey)
        : [...prev, mealKey]
    );
  };

  const generateMockRecipe = (mealType: string) => {
    const recipes = {
      reggeli: [
        { n√©v: "Alm√°s Muffin R√©p√°val", hozz√°val√≥k: ["alma", "r√©pa", "liszt", "cukor", "toj√°s"], elk√©sz√≠t√©s: "Keverj√ºk √∂ssze a hozz√°val√≥kat √©s s√ºss√ºk meg.", elk√©sz√≠t√©siId≈ë: "30 perc", sz√©nhidr√°t: "25g", feh√©rje: "8g", zs√≠r: "12g" },
        { n√©v: "Avok√°d√≥ Sal√°ta kov√°szos keny√©rrel", hozz√°val√≥k: ["avok√°d√≥", "kov√°szos keny√©r", "paradicsom", "s√≥", "bors"], elk√©sz√≠t√©s: "V√°gjuk fel az avok√°d√≥t √©s t√°laljuk a keny√©rrel.", elk√©sz√≠t√©siId≈ë: "10 perc", sz√©nhidr√°t: "30g", feh√©rje: "10g", zs√≠r: "15g" }
      ],
      tiz√≥rai: [
        { n√©v: "Gy√ºm√∂lcs sal√°ta", hozz√°val√≥k: ["alma", "ban√°n", "narancs", "sz≈ël≈ë"], elk√©sz√≠t√©s: "V√°gjuk fel a gy√ºm√∂lcs√∂ket √©s keverj√ºk √∂ssze.", elk√©sz√≠t√©siId≈ë: "5 perc", sz√©nhidr√°t: "20g", feh√©rje: "2g", zs√≠r: "1g" },
        { n√©v: "Joghurt m√ºzlivel", hozz√°val√≥k: ["joghurt", "m√ºzli", "m√©z"], elk√©sz√≠t√©s: "Keverj√ºk √∂ssze a joghurtot a m√ºzlivel.", elk√©sz√≠t√©siId≈ë: "2 perc", sz√©nhidr√°t: "25g", feh√©rje: "12g", zs√≠r: "8g" }
      ],
      eb√©d: [
        { n√©v: "Anan√°szos Csirke", hozz√°val√≥k: ["csirkemell", "anan√°sz", "rizs", "sz√≥jasz√≥sz"], elk√©sz√≠t√©s: "S√ºss√ºk meg a csirk√©t az anan√°sszal.", elk√©sz√≠t√©siId≈ë: "45 perc", sz√©nhidr√°t: "40g", feh√©rje: "35g", zs√≠r: "18g" },
        { n√©v: "√Åzsiai lazacos quinoa", hozz√°val√≥k: ["lazac", "quinoa", "z√∂lds√©gek", "szez√°m"], elk√©sz√≠t√©s: "F≈ëzz√ºk meg a quino√°t √©s s√ºss√ºk meg a lazacot.", elk√©sz√≠t√©siId≈ë: "35 perc", sz√©nhidr√°t: "30g", feh√©rje: "40g", zs√≠r: "22g" }
      ],
      uzsonna: [
        { n√©v: "Alm√°s pite", hozz√°val√≥k: ["alma", "liszt", "vaj", "cukor"], elk√©sz√≠t√©s: "K√©sz√≠ts√ºnk t√©szt√°t √©s t√∂lts√ºk meg alm√°val.", elk√©sz√≠t√©siId≈ë: "60 perc", sz√©nhidr√°t: "45g", feh√©rje: "6g", zs√≠r: "20g" },
        { n√©v: "T√∫r√≥s pog√°csa", hozz√°val√≥k: ["t√∫r√≥", "liszt", "vaj", "s√≥"], elk√©sz√≠t√©s: "Gy√∫rjuk √∂ssze a t√©szt√°t √©s s√ºss√ºk meg.", elk√©sz√≠t√©siId≈ë: "40 perc", sz√©nhidr√°t: "30g", feh√©rje: "15g", zs√≠r: "18g" }
      ],
      vacsora: [
        { n√©v: "Avok√°d√≥s Csirk√©s Tortilla", hozz√°val√≥k: ["tortilla", "csirkemell", "avok√°d√≥", "sal√°ta"], elk√©sz√≠t√©s: "T√∂lts√ºk meg a tortill√°t √©s tekerj√ºk fel.", elk√©sz√≠t√©siId≈ë: "20 perc", sz√©nhidr√°t: "35g", feh√©rje: "28g", zs√≠r: "16g" },
        { n√©v: "Buddha t√°l", hozz√°val√≥k: ["quinoa", "s√ºlt z√∂lds√©gek", "tahini", "csicseribors√≥"], elk√©sz√≠t√©s: "T√°laljuk a quino√°t a s√ºlt z√∂lds√©gekkel.", elk√©sz√≠t√©siId≈ë: "30 perc", sz√©nhidr√°t: "40g", feh√©rje: "18g", zs√≠r: "14g" }
      ]
    };

    const mealRecipes = recipes[mealType as keyof typeof recipes] || [];
    if (mealRecipes.length === 0) return null;
    
    return mealRecipes[Math.floor(Math.random() * mealRecipes.length)];
  };

  const generateDailyMealPlan = async () => {
    if (selectedMeals.length === 0) {
      toast({
        title: "Hiba",
        description: "V√°lassz legal√°bb egy √©tkez√©st!",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    const newPlan: MealPlan = {};
    
    selectedMeals.forEach(mealType => {
      newPlan[mealType] = {
        mealType,
        recipe: generateMockRecipe(mealType)
      };
    });

    setDailyPlan(newPlan);
    setShowResults(true);
    setIsGenerating(false);

    toast({
      title: "Sikeres gener√°l√°s!",
      description: "A napi √©trendet sikeresen l√©trehoztuk.",
    });
  };

  const regenerateAllMeals = async () => {
    setIsGenerating(true);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const newPlan: MealPlan = {};
    
    Object.keys(dailyPlan).forEach(mealType => {
      newPlan[mealType] = {
        mealType,
        recipe: generateMockRecipe(mealType)
      };
    });

    setDailyPlan(newPlan);
    setIsGenerating(false);

    toast({
      title: "√öjragener√°l√°s k√©sz!",
      description: "Az √∂sszes √©telt √∫jragener√°ltuk.",
    });
  };

  return (
    <div className="space-y-6">
      {/* Meal Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="text-center">V√°laszd ki a f≈ë√©tkez√©seket:</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
            {mealOptions.map((meal) => (
              <div key={meal.key} className="flex items-center space-x-2">
                <Checkbox
                  id={`daily-${meal.key}`}
                  checked={selectedMeals.includes(meal.key)}
                  onCheckedChange={() => handleMealToggle(meal.key)}
                />
                <label 
                  htmlFor={`daily-${meal.key}`} 
                  className="text-sm font-medium cursor-pointer"
                >
                  {meal.label}
                </label>
              </div>
            ))}
          </div>

          <div className="flex justify-center gap-4">
            <Button
              onClick={generateDailyMealPlan}
              disabled={isGenerating || selectedMeals.length === 0}
              className="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Gener√°l√°s...
                </>
              ) : (
                "üéØ Random Napi √âtrend"
              )}
            </Button>
            
            {showResults && (
              <Button
                onClick={regenerateAllMeals}
                disabled={isGenerating}
                variant="outline"
                className="hover:bg-gray-100"
              >
                üîÑ √ñsszes √öjragener√°l√°s
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Daily Meal Results */}
      {showResults && (
        <div className="space-y-4">
          <h3 className="text-2xl font-bold text-center text-gray-800 mb-6">
            üçΩÔ∏è Mai √âtrendem
          </h3>
          
          <div className="grid gap-6">
            {Object.entries(dailyPlan).map(([mealType, mealData]) => (
              <Card key={mealType} className="shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {mealOptions.find(m => m.key === mealType)?.label || mealType}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {mealData.recipe ? (
                    <div className="space-y-4">
                      <h4 className="text-xl font-semibold text-green-700">
                        {mealData.recipe.n√©v}
                      </h4>
                      
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <h5 className="font-semibold mb-2">ü•ò Hozz√°val√≥k:</h5>
                          <ul className="list-disc list-inside space-y-1">
                            {mealData.recipe.hozz√°val√≥k.map((ingredient, idx) => (
                              <li key={idx} className="text-sm text-gray-600">
                                {ingredient}
                              </li>
                            ))}
                          </ul>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="text-sm">
                            <span className="font-semibold">‚è±Ô∏è Elk√©sz√≠t√©si id≈ë:</span> {mealData.recipe.elk√©sz√≠t√©siId≈ë}
                          </div>
                          <div className="text-sm">
                            <span className="font-semibold">üçû Sz√©nhidr√°t:</span> {mealData.recipe.sz√©nhidr√°t}
                          </div>
                          <div className="text-sm">
                            <span className="font-semibold">ü•© Feh√©rje:</span> {mealData.recipe.feh√©rje}
                          </div>
                          <div className="text-sm">
                            <span className="font-semibold">ü•ë Zs√≠r:</span> {mealData.recipe.zs√≠r}
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h5 className="font-semibold mb-2">üë®‚Äçüç≥ Elk√©sz√≠t√©s:</h5>
                        <p className="text-sm text-gray-600">{mealData.recipe.elk√©sz√≠t√©s}</p>
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-500">Nem siker√ºlt receptet tal√°lni ehhez az √©tkez√©shez.</p>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
