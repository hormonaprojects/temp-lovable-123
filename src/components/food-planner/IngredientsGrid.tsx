
import { IngredientCard } from "./IngredientCard";

interface IngredientsGridProps {
  ingredients: string[];
  categoryName: string;
  getPreferenceForIngredient: (ingredient: string) => 'like' | 'dislike' | 'neutral';
  getFavoriteForIngredient: (ingredient: string) => boolean;
  onPreferenceChange: (ingredient: string, preference: 'like' | 'dislike' | 'neutral') => void;
  onFavoriteChange: (ingredient: string, isFavorite: boolean) => void;
}

export function IngredientsGrid({ 
  ingredients, 
  categoryName, 
  getPreferenceForIngredient,
  getFavoriteForIngredient,
  onPreferenceChange,
  onFavoriteChange
}: IngredientsGridProps) {
  if (ingredients.length === 0) {
    return (
      <div className="text-center mb-8 p-6 bg-yellow-50 border border-yellow-200 rounded-xl">
        <p className="text-yellow-800 font-medium">
          Nincsenek alapanyagok bet√∂ltve ehhez a kateg√≥ri√°hoz: {categoryName}
        </p>
      </div>
    );
  }

  // Jav√≠tott sorrendez√©s: kedvencek EL≈êSZ√ñR, majd liked, majd neutral (disliked elrejt√©se)
  const sortedIngredients = [...ingredients]
    .filter(ingredient => {
      const preference = getPreferenceForIngredient(ingredient);
      return preference !== 'dislike'; // Elrejtj√ºk a disliked alapanyagokat
    })
    .sort((a, b) => {
      const aIsFavorite = getFavoriteForIngredient(a);
      const bIsFavorite = getFavoriteForIngredient(b);
      const aPreference = getPreferenceForIngredient(a);
      const bPreference = getPreferenceForIngredient(b);
      
      console.log(`üîç Sorrendez√©s: ${a} (kedvenc: ${aIsFavorite}, pref: ${aPreference}) vs ${b} (kedvenc: ${bIsFavorite}, pref: ${bPreference})`);
      
      // ELS≈ê PRIORIT√ÅS: kedvencek (r√≥zsasz√≠n sz√≠v)
      if (aIsFavorite && !bIsFavorite) {
        console.log(`‚ú® ${a} kedvenc, el≈ëre ker√ºl`);
        return -1;
      }
      if (!aIsFavorite && bIsFavorite) {
        console.log(`‚ú® ${b} kedvenc, el≈ëre ker√ºl`);
        return 1;
      }
      
      // Ha mindkett≈ë kedvenc vagy mindkett≈ë nem kedvenc, akkor preferencia szerint
      if (!aIsFavorite && !bIsFavorite) {
        // M√ÅSODIK PRIORIT√ÅS: liked alapanyagok (z√∂ld sz√≠n≈±)
        if (aPreference === 'like' && bPreference !== 'like') {
          console.log(`üíö ${a} liked, el≈ëre ker√ºl`);
          return -1;
        }
        if (aPreference !== 'like' && bPreference === 'like') {
          console.log(`üíö ${b} liked, el≈ëre ker√ºl`);
          return 1;
        }
      }
      
      // HARMADIK PRIORIT√ÅS: √°b√©c√© sorrend ugyanazon szinten
      const result = a.localeCompare(b, 'hu');
      console.log(`üìù √Åb√©c√© sorrend: ${a} vs ${b} = ${result}`);
      return result;
    });

  console.log(`üéØ V√©gs≈ë sorrendezett lista (${categoryName}):`, sortedIngredients);

  return (
    <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 xl:grid-cols-8 gap-3 mb-8">
      {sortedIngredients.map((ingredient, index) => (
        <IngredientCard
          key={ingredient}
          ingredient={ingredient}
          preference={getPreferenceForIngredient(ingredient)}
          favorite={getFavoriteForIngredient(ingredient)}
          index={index}
          onPreferenceChange={onPreferenceChange}
          onFavoriteChange={onFavoriteChange}
        />
      ))}
    </div>
  );
}
