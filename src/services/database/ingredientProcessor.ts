
import { Alapanyag, ReceptAlapanyagV2 } from './types';

export const processIngredientsForRecipes = (
  alapanyagokRaw: ReceptAlapanyagV2[],
  alapanyagokMaster: Alapanyag[]
): Record<number, string[]> => {
  console.log('üîÑ Alapanyagok feldolgoz√°sa kezd≈ëdik...');
  console.log('üìä Nyers alapanyagok sz√°ma:', alapanyagokRaw.length);
  console.log('üìä Master alapanyagok sz√°ma:', alapanyagokMaster.length);

  // Alapanyag lookup map k√©sz√≠t√©se ID alapj√°n
  const alapanyagMap = new Map<string, Alapanyag>();
  alapanyagokMaster.forEach(alapanyag => {
    alapanyagMap.set(alapanyag.ID.toString(), alapanyag);
  });

  console.log('üìã Alapanyag map m√©rete:', alapanyagMap.size);

  // Csoportos√≠tjuk az alapanyagokat recept ID szerint
  console.log('üîÑ Alapanyagok csoportos√≠t√°sa Recept_ID szerint...');
  const alapanyagokByReceptId = alapanyagokRaw.reduce((acc, alapanyag) => {
    const receptId = alapanyag['Recept_ID'];
    if (!receptId) {
      console.warn('‚ö†Ô∏è Hi√°nyz√≥ Recept_ID:', alapanyag);
      return acc;
    }
    
    if (!acc[receptId]) {
      acc[receptId] = [];
    }
    
    // Alapanyag r√©szletek lek√©r√©se
    const elelmiszerID = alapanyag['√âlelmiszer ID'];
    const elelmiszerNev = alapanyag['√âlelmiszerek'];
    const mennyiseg = alapanyag['Mennyis√©g'] || '';
    const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
    
    console.log(`üîç Feldolgoz√°s - Recept ID: ${receptId}, √âlelmiszer: ${elelmiszerNev}, Mennyis√©g: ${mennyiseg}, M√©rt√©kegys√©g: ${mertekegyseg}`);
    
    // Ha van √âlelmiszer ID, haszn√°ljuk az alapanyag t√°bl√°b√≥l az adatokat
    let finalElelmiszerNev = elelmiszerNev;
    if (elelmiszerID && alapanyagMap.has(elelmiszerID.toString())) {
      const masterAlapanyag = alapanyagMap.get(elelmiszerID.toString())!;
      finalElelmiszerNev = masterAlapanyag.Elelmiszer || elelmiszerNev;
      console.log(`‚úÖ Master alapanyag tal√°lat: ${finalElelmiszerNev}`);
    }
    
    // √âp√≠ts√ºk fel a form√°zott alapanyag stringet
    let formattedIngredient = '';
    if (mennyiseg && mennyiseg.toString().trim() !== '') {
      formattedIngredient += mennyiseg.toString();
    }
    if (mertekegyseg && mertekegyseg.trim() !== '') {
      formattedIngredient += (formattedIngredient ? ' ' : '') + mertekegyseg;
    }
    if (finalElelmiszerNev && finalElelmiszerNev.trim() !== '') {
      formattedIngredient += (formattedIngredient ? ' ' : '') + finalElelmiszerNev;
    }
    
    if (formattedIngredient.trim()) {
      acc[receptId].push(formattedIngredient.trim());
      console.log(`‚úÖ Hozz√°adva: "${formattedIngredient.trim()}" (Recept ID: ${receptId})`);
    } else {
      console.warn(`‚ö†Ô∏è √úres alapanyag (Recept ID: ${receptId}):`, { elelmiszerNev, mennyiseg, mertekegyseg });
    }
    
    return acc;
  }, {} as Record<number, string[]>);

  console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
  
  // Debug: mutassuk meg n√©h√°ny recept alapanyagait
  Object.entries(alapanyagokByReceptId).slice(0, 3).forEach(([receptId, ingredients]) => {
    console.log(`üçΩÔ∏è Recept ${receptId} alapanyagai (${ingredients.length} db):`, ingredients);
  });
  
  return alapanyagokByReceptId;
};
