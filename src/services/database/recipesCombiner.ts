
import { fetchReceptekV2, fetchReceptAlapanyagV2, fetchAlapanyagok } from './fetchers';
import { processIngredientsForRecipes } from './ingredientProcessor';
import { determineMealTypesForRecipe } from './mealTypeProcessor';
import { CombinedRecipe } from './types';

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öJ adatb√°zis strukt√∫ra bet√∂lt√©se (csak receptek + recept_alapanyag + alapanyag + √âtkez√©sek)...');
    
    const [receptek, alapanyagokRaw, alapanyagokMaster] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2(),
      fetchAlapanyagok()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagokRaw: alapanyagokRaw.length,
      alapanyagokMaster: alapanyagokMaster.length
    });

    // Ha nincs el√©g adat, ne folytassuk
    if (receptek.length === 0) {
      console.error('‚ùå KRITIKUS: Nincs egyetlen recept sem a receptek t√°bl√°ban!');
      return [];
    }

    const alapanyagokByReceptId = processIngredientsForRecipes(alapanyagokRaw, alapanyagokMaster);

    // Kombin√°ljuk a recepteket az alapanyagokkal √©s meal type-okkal
    const combinedRecipes: CombinedRecipe[] = [];
    
    console.log('üîÑ Receptek feldolgoz√°sa meal type-okkal...');
    
    for (const recept of receptek) {
      const receptId = recept['Recept ID'];
      const receptName = recept['Receptn√©v'] || 'N√©vtelen recept';
      const hozzavalok = alapanyagokByReceptId[receptId] || [];
      
      console.log(`üîç Recept feldolgoz√°sa: "${receptName}" (ID: ${receptId})`);
      
      // Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n RECEPTN√âV szerint
      const mealTypes = await determineMealTypesForRecipe(receptName);
      
      // Minden receptet hozz√°adunk
      combinedRecipes.push({
        id: receptId,
        n√©v: receptName,
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
        feh√©rje: recept['Feherje_g'] || 0,
        zs√≠r: recept['Zsir_g'] || 0,
        hozz√°val√≥k: hozzavalok,
        mealTypes: mealTypes
      });
      
      if (mealTypes.length > 0) {
        console.log(`‚úÖ Recept hozz√°adva meal type-okkal: "${receptName}" - meal types: ${mealTypes.join(', ')}`);
      } else {
        console.log(`‚ö†Ô∏è Recept hozz√°adva meal type n√©lk√ºl: "${receptName}"`);
      }
    }

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva:', combinedRecipes.length);
    console.log('üìä Receptek √©tkez√©si t√≠pussal:', combinedRecipes.filter(r => r.mealTypes.length > 0).length);
    
    // Meal type statisztika
    const mealTypeStats = combinedRecipes.reduce((acc, recipe) => {
      recipe.mealTypes.forEach(mealType => {
        acc[mealType] = (acc[mealType] || 0) + 1;
      });
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà Meal type statisztik√°k:', mealTypeStats);
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba:', error);
    throw error;
  }
};
