
import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, CombinedRecipe } from '@/types/newDatabase';

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  const { data, error } = await supabase
    .from('receptekv2')
    .select('*');

  if (error) {
    console.error('ReceptekV2 bet√∂lt√©si hiba:', error);
    throw error;
  }

  return data || [];
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  const { data, error } = await supabase
    .from('recept_alapanyagv2')
    .select('*');

  if (error) {
    console.error('Recept alapanyag bet√∂lt√©si hiba:', error);
    throw error;
  }

  return data || [];
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öj adatb√°zis strukt√∫ra bet√∂lt√©se...');
    
    const [receptek, alapanyagok] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagok: alapanyagok.length
    });

    // Csoportos√≠tjuk az alapanyagokat recept ID szerint
    const alapanyagokByReceptId = alapanyagok.reduce((acc, alapanyag) => {
      const receptId = alapanyag['Recept_ID'];
      if (!acc[receptId]) {
        acc[receptId] = [];
      }
      
      // Form√°zott alapanyag string: "Mennyis√©g M√©rt√©kegys√©g √âlelmiszer"
      const mennyiseg = alapanyag['Mennyis√©g'] || '';
      const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
      const elelmiszer = alapanyag['√âlelmiszerek'] || '';
      
      const formattedIngredient = `${mennyiseg} ${mertekegyseg} ${elelmiszer}`.trim();
      acc[receptId].push(formattedIngredient);
      
      return acc;
    }, {} as Record<number, string[]>);

    // Kombin√°ljuk a recepteket az alapanyagokkal
    const combinedRecipes: CombinedRecipe[] = receptek.map(recept => ({
      id: recept['Recept ID'],
      n√©v: recept['Receptn√©v'] || 'N√©vtelen recept',
      elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
      k√©p: recept['K√©p'] || '',
      sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
      feh√©rje: recept['Feherje_g'] || 0,
      zs√≠r: recept['Zsir_g'] || 0,
      hozz√°val√≥k: alapanyagokByReceptId[recept['Recept ID']] || []
    }));

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva:', combinedRecipes.length);
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba:', error);
    throw error;
  }
};
