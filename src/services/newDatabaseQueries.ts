
import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, CombinedRecipe } from '@/types/newDatabase';

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  console.log('üîÑ ReceptekV2 lek√©r√©se...');
  const { data, error } = await supabase
    .from('receptekv2')
    .select('*');

  if (error) {
    console.error('‚ùå ReceptekV2 bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ ReceptekV2 bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  console.log('üîÑ Recept alapanyag lek√©r√©se...');
  const { data, error } = await supabase
    .from('recept_alapanyagv2')
    .select('*');

  if (error) {
    console.error('‚ùå Recept alapanyag bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ Recept alapanyag bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

// Fallback: ha az √∫j t√°bl√°k √ºresek, pr√≥b√°ljuk meg a r√©gi adatb√°zisb√≥l bet√∂lteni
export const fetchLegacyRecipes = async () => {
  console.log('üîÑ Fallback: r√©gi adatb√°zis lek√©r√©se...');
  const { data, error } = await supabase
    .from('Adatb√°zis')
    .select('*');

  if (error) {
    console.error('‚ùå R√©gi adatb√°zis bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ R√©gi adatb√°zis bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öj adatb√°zis strukt√∫ra bet√∂lt√©se...');
    
    const [receptek, alapanyagok] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagok: alapanyagok.length
    });

    // KRITIKUS: Csak az √∫j t√°bl√°k adatait haszn√°ljuk, nincs fallback
    if (receptek.length === 0) {
      console.warn('‚ö†Ô∏è √öj t√°bl√°k √ºresek, de NEM haszn√°ljuk a fallback-et!');
      return [];
    }

    // Csoportos√≠tjuk az alapanyagokat recept ID szerint
    const alapanyagokByReceptId = alapanyagok.reduce((acc, alapanyag) => {
      const receptId = alapanyag['Recept_ID'];
      if (!acc[receptId]) {
        acc[receptId] = [];
      }
      
      // JAV√çT√ÅS: Pontosan form√°zott alapanyag string a t√°bl√°ban tal√°lhat√≥ adatok alapj√°n
      const mennyiseg = alapanyag['Mennyis√©g'] || '';
      const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
      const elelmiszer = alapanyag['√âlelmiszerek'] || '';
      
      // Debug log az egyes alapanyagokhoz
      console.log(`üìù Alapanyag Recept_ID ${receptId}:`, {
        mennyiseg,
        mertekegyseg,
        elelmiszer
      });
      
      const formattedIngredient = `${mennyiseg} ${mertekegyseg} ${elelmiszer}`.trim();
      if (formattedIngredient && formattedIngredient !== '  ') {
        acc[receptId].push(formattedIngredient);
        console.log(`‚úÖ Hozz√°adva: "${formattedIngredient}" a ${receptId} ID-hez`);
      }
      
      return acc;
    }, {} as Record<number, string[]>);

    console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
    
    // Debug log minden recept ID-hez tartoz√≥ alapanyagokr√≥l
    Object.entries(alapanyagokByReceptId).forEach(([receptId, ingredients]) => {
      console.log(`üîç Recept ID ${receptId} alapanyagai:`, ingredients);
    });

    // Kombin√°ljuk a recepteket az alapanyagokkal
    const combinedRecipes: CombinedRecipe[] = receptek.map(recept => {
      const receptId = recept['Recept ID'];
      const hozzavalok = alapanyagokByReceptId[receptId] || [];
      
      if (hozzavalok.length === 0) {
        console.warn(`‚ö†Ô∏è Nincs alapanyag a ${receptId} ID-j√∫ recepthez: ${recept['Receptn√©v']}`);
      } else {
        console.log(`‚úÖ ${receptId} ID-hoz (${recept['Receptn√©v']}) tartoz√≥ alapanyagok:`, hozzavalok);
      }
      
      return {
        id: receptId,
        n√©v: recept['Receptn√©v'] || 'N√©vtelen recept',
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
        feh√©rje: recept['Feherje_g'] || 0,
        zs√≠r: recept['Zsir_g'] || 0,
        hozz√°val√≥k: hozzavalok
      };
    });

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva:', combinedRecipes.length);
    console.log('üìä Receptek hozz√°val√≥kkal:', combinedRecipes.filter(r => r.hozz√°val√≥k.length > 0).length);
    
    // Debug log az els≈ë p√°r recepthez
    combinedRecipes.slice(0, 5).forEach(recipe => {
      console.log(`üîç ${recipe.n√©v} (ID: ${recipe.id}) hozz√°val√≥i:`, recipe.hozz√°val√≥k);
    });
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba:', error);
    throw error;
  }
};
