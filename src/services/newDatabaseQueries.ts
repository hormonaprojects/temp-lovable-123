import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, CombinedRecipe } from '@/types/newDatabase';

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  console.log('üîÑ Receptek lek√©r√©se...');
  
  const { data, error } = await supabase
    .from('receptek')
    .select('*');

  if (error) {
    console.error('‚ùå receptek t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat a receptek t√°bl√°ban!');
    return [];
  }

  console.log('‚úÖ Receptek bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë recept p√©lda:', data[0]);
  
  return data;
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  console.log('üîÑ Recept alapanyag lek√©r√©se...');
  
  const { data, error } = await supabase
    .from('recept_alapanyag')
    .select('*');

  if (error) {
    console.error('‚ùå recept_alapanyag t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat a recept_alapanyag t√°bl√°ban!');
    return [];
  }

  console.log('‚úÖ Recept alapanyag bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë alapanyag p√©lda:', data[0]);
  
  return data;
};

// Sz√∂veg normaliz√°l√°si f√ºggv√©ny a jobb egyez√©shez
const normalizeText = (text: string): string => {
  return text
    .toLowerCase()
    .trim()
    .replace(/[√°√†√¢√§]/g, 'a')
    .replace(/[√©√®√™√´]/g, 'e')
    .replace(/[√≠√¨√Æ√Ø]/g, 'i')
    .replace(/[√≥√≤√¥√∂]/g, 'o')
    .replace(/[√∫√π√ª√º]/g, 'u')
    .replace(/[≈ë]/g, 'o')
    .replace(/[≈±]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[√±]/g, 'n')
    .replace(/\s+/g, ' ')
    .replace(/[^\w\s]/g, '');
};

// Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n - JAV√çTOTT VERZI√ì
const determineMealTypesForRecipe = async (recipeName: string): Promise<string[]> => {
  console.log('üîç Meal types meghat√°roz√°sa recepthez:', recipeName);
  
  const { data: mealTypesData, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek t√°bla lek√©r√©si hiba:', error);
    return [];
  }

  if (!mealTypesData || mealTypesData.length === 0) {
    console.warn('‚ö†Ô∏è √âtkez√©sek t√°bla √ºres!');
    return [];
  }

  console.log('üìä √âtkez√©sek t√°bla adatok:', mealTypesData.length, 'sor');

  const normalizedRecipeName = normalizeText(recipeName);
  const mealTypes: string[] = [];

  // Keress√ºk meg a recept nev√©t az √âtkez√©sek t√°bl√°ban
  const matchingRows = mealTypesData.filter(row => {
    const rowRecipeName = row['Recept Neve'];
    if (!rowRecipeName) return false;
    
    const normalizedRowName = normalizeText(rowRecipeName);
    
    // Pontosabb egyez√©s
    const exactMatch = normalizedRowName === normalizedRecipeName;
    const containsMatch = normalizedRowName.includes(normalizedRecipeName) && normalizedRecipeName.length > 3;
    const reverseContains = normalizedRecipeName.includes(normalizedRowName) && normalizedRowName.length > 3;
    
    return exactMatch || containsMatch || reverseContains;
  });

  console.log(`üîç "${recipeName}" egyez√©sek az √âtkez√©sek t√°bl√°ban:`, matchingRows.length);

  if (matchingRows.length > 0) {
    // Haszn√°ljuk az els≈ë egyez√©st
    const matchingRow = matchingRows[0];
    console.log(`‚úÖ Tal√°lat: "${recipeName}" ‚Üí "${matchingRow['Recept Neve']}"`);
    
    // Ellen≈ërizz√ºk az √∂sszes √©tkez√©si t√≠pust
    const mealTypeColumns = ['Reggeli', 'T√≠z√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
    
    mealTypeColumns.forEach(mealType => {
      const cellValue = matchingRow[mealType];
      if (cellValue && (
        cellValue.toString().toLowerCase().includes('x') || 
        cellValue.toString().toLowerCase().includes('igen') || 
        cellValue === '1' || 
        cellValue === 1 ||
        cellValue === 'X' ||
        cellValue === 'x'
      )) {
        const normalizedMealType = mealType.toLowerCase();
        mealTypes.push(normalizedMealType);
        console.log(`‚úÖ "${recipeName}" ‚Üí "${normalizedMealType}" (√©rt√©k: ${cellValue})`);
      }
    });
  } else {
    console.log(`‚ö†Ô∏è "${recipeName}" nem tal√°lhat√≥ az √âtkez√©sek t√°bl√°ban`);
    // Pr√≥b√°ljunk r√©szleges egyez√©st
    const partialMatches = mealTypesData.filter(row => {
      const rowRecipeName = row['Recept Neve'];
      if (!rowRecipeName) return false;
      
      const normalizedRowName = normalizeText(rowRecipeName);
      const words = normalizedRecipeName.split(' ').filter(word => word.length > 2);
      
      return words.some(word => normalizedRowName.includes(word));
    });
    
    if (partialMatches.length > 0) {
      console.log(`üîç R√©szleges egyez√©sek tal√°lva: ${partialMatches.length} db`);
      console.log('üìã R√©szleges egyez√©sek:', partialMatches.map(row => row['Recept Neve']).slice(0, 3));
    }
  }

  return mealTypes;
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öJ adatb√°zis strukt√∫ra bet√∂lt√©se (receptek + recept_alapanyag + √âtkez√©sek)...');
    
    const [receptek, alapanyagok] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagok: alapanyagok.length
    });

    if (receptek.length === 0) {
      console.warn('‚ö†Ô∏è Receptek t√°bla √ºres!');
      return [];
    }

    if (alapanyagok.length === 0) {
      console.warn('‚ö†Ô∏è Alapanyag t√°bla √ºres!');
      return [];
    }

    // Debug: N√©zz√ºk meg a receptek ID-jeit √©s alapanyag Recept_ID-ket
    console.log('üìã Recept ID-k (els≈ë 5):', receptek.slice(0, 5).map(r => r['Recept ID']));
    console.log('üìã Alapanyag Recept_ID-k (els≈ë 10):', [...new Set(alapanyagok.slice(0, 10).map(a => a['Recept_ID']))]);

    // Csoportos√≠tjuk az alapanyagokat recept ID szerint - JAV√çTOTT VERZI√ì
    console.log('üîÑ Alapanyagok csoportos√≠t√°sa Recept_ID szerint...');
    const alapanyagokByReceptId = alapanyagok.reduce((acc, alapanyag) => {
      const receptId = alapanyag['Recept_ID'];
      if (!receptId) {
        console.warn('‚ö†Ô∏è Alapanyag Recept_ID n√©lk√ºl:', alapanyag);
        return acc;
      }
      
      if (!acc[receptId]) {
        acc[receptId] = [];
      }
      
      // Pontos alapanyag form√°z√°s
      const mennyiseg = alapanyag['Mennyis√©g'] || '';
      const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
      const elelmiszer = alapanyag['√âlelmiszerek'] || '';
      
      // √âp√≠ts√ºk fel a form√°zott alapanyag stringet
      let formattedIngredient = '';
      if (mennyiseg) {
        formattedIngredient += mennyiseg;
      }
      if (mertekegyseg) {
        formattedIngredient += (formattedIngredient ? ' ' : '') + mertekegyseg;
      }
      if (elelmiszer) {
        formattedIngredient += (formattedIngredient ? ' ' : '') + elelmiszer;
      }
      
      if (formattedIngredient.trim()) {
        acc[receptId].push(formattedIngredient.trim());
      }
      
      return acc;
    }, {} as Record<number, string[]>);

    console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
    
    // Mutassuk meg n√©h√°ny p√©ld√°t
    Object.entries(alapanyagokByReceptId).slice(0, 3).forEach(([receptId, ingredients]) => {
      console.log(`üìã Recept ID ${receptId}: ${ingredients.length} alapanyag - ${ingredients.slice(0, 2).join(', ')}${ingredients.length > 2 ? '...' : ''}`);
    });

    // Kombin√°ljuk a recepteket az alapanyagokkal √©s meal type-okkal
    const combinedRecipes: CombinedRecipe[] = [];
    
    for (const recept of receptek) {
      const receptId = recept['Recept ID'];
      const receptName = recept['Receptn√©v'] || 'N√©vtelen recept';
      const hozzavalok = alapanyagokByReceptId[receptId] || [];
      
      console.log(`üîç Recept "${receptName}" (ID: ${receptId}) - ${hozzavalok.length} alapanyag`);
      
      // Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n RECEPTN√âV szerint
      const mealTypes = await determineMealTypesForRecipe(receptName);
      
      if (hozzavalok.length === 0) {
        console.warn(`‚ö†Ô∏è Nincs alapanyag a ${receptId} ID-j√∫ recepthez: ${receptName}`);
      }
      
      combinedRecipes.push({
        id: receptId,
        n√©v: receptName,
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
        feh√©rje: recept['Feherje_g'] || 0,
        zs√≠r: recept['Zsir_g'] || 0,
        hozz√°val√≥k: hozzavalok,
        mealTypes: mealTypes
      });
    }

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva √öJ strukt√∫r√°b√≥l:', combinedRecipes.length);
    console.log('üìä Receptek hozz√°val√≥kkal:', combinedRecipes.filter(r => r.hozz√°val√≥k.length > 0).length);
    console.log('üìä Receptek √©tkez√©si t√≠pussal:', combinedRecipes.filter(r => r.mealTypes.length > 0).length);
    
    // R√©szletes meal type statisztika
    const mealTypeStats = combinedRecipes.reduce((acc, recipe) => {
      recipe.mealTypes.forEach(mealType => {
        acc[mealType] = (acc[mealType] || 0) + 1;
      });
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà Meal type statisztik√°k (√öJ strukt√∫ra):', mealTypeStats);
    
    // Debug: Els≈ë n√©h√°ny recept r√©szletei
    console.log('üìã Els≈ë 3 recept r√©szletei:');
    combinedRecipes.slice(0, 3).forEach(recipe => {
      console.log(`- ${recipe.n√©v}: ${recipe.hozz√°val√≥k.length} alapanyag, ${recipe.mealTypes.length} meal type`);
      if (recipe.hozz√°val√≥k.length > 0) {
        console.log(`  Alapanyagok: ${recipe.hozz√°val√≥k.slice(0, 3).join(', ')}${recipe.hozz√°val√≥k.length > 3 ? '...' : ''}`);
      }
    });
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba (√öJ strukt√∫ra):', error);
    throw error;
  }
};
