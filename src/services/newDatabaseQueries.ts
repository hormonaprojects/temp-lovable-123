
import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, CombinedRecipe } from '@/types/newDatabase';

// Alapanyag t√°bla t√≠pusa
interface Alapanyag {
  ID: number;
  Elelmiszer: string;
  'Feh√©rje/100g': string;
  'Sz√©nhidr√°t/100g': string;
  'Zsir/100g': string;
  'Kaloria/100g': string;
}

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  console.log('üîÑ Receptek lek√©r√©se az √∫j receptek t√°bl√°b√≥l...');
  
  const { data, error } = await supabase
    .from('receptek')
    .select('*');

  if (error) {
    console.error('‚ùå receptek t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat a receptek t√°bl√°ban!');
    console.log('üìã Pr√≥b√°ljuk ellen≈ërizni a t√°bla l√©tez√©s√©t...');
    
    // Alternat√≠v pr√≥b√°lkoz√°s - lehet hogy m√°shogy h√≠vj√°k a t√°bl√°t
    const { data: altData, error: altError } = await supabase
      .from('Adatb√°zis')
      .select('*');
    
    if (altError) {
      console.error('‚ùå Adatb√°zis t√°bla sem el√©rhet≈ë:', altError);
      return [];
    }
    
    if (altData && altData.length > 0) {
      console.log('‚úÖ Adatb√°zis t√°bla el√©rhet≈ë, konvert√°l√°s...');
      // Konvert√°ljuk az Adatb√°zis t√°bla form√°tum√°t a receptek form√°tum√°ra
      return altData.map((item, index) => ({
        'Recept ID': index + 1,
        'Receptn√©v': item.Recept_Neve || 'N√©vtelen recept',
        'Elk√©sz√≠t√©se': item.Elk√©sz√≠t√©s || 'Nincs le√≠r√°s',
        'K√©p': item['K√©p URL'] || '',
        'Szenhidrat_g': item.Szenhidrat_g || 0,
        'Feherje_g': item.Feherje_g || 0,
        'Zsir_g': item.Zsir_g || 0
      }));
    }
    
    return [];
  }

  console.log('‚úÖ Receptek bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë recept p√©lda:', data[0]);
  
  return data;
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  console.log('üîÑ Recept alapanyag lek√©r√©se az √∫j recept_alapanyag t√°bl√°b√≥l...');
  
  const { data, error } = await supabase
    .from('recept_alapanyag')
    .select('*');

  if (error) {
    console.error('‚ùå recept_alapanyag t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat a recept_alapanyag t√°bl√°ban!');
    console.log('üìã Pr√≥b√°ljuk az Adatb√°zis t√°bl√°b√≥l kinyerni...');
    
    // Ha nincs k√ºl√∂n recept_alapanyag t√°bla, pr√≥b√°ljuk az Adatb√°zis t√°bl√°b√≥l
    const { data: altData, error: altError } = await supabase
      .from('Adatb√°zis')
      .select('*');
    
    if (altError || !altData) {
      console.error('‚ùå Nem siker√ºlt az alapanyagokat bet√∂lteni');
      return [];
    }
    
    // Konvert√°ljuk az Adatb√°zis t√°bla alapanyagait
    const convertedData: ReceptAlapanyagV2[] = [];
    altData.forEach((item, receptIndex) => {
      for (let i = 1; i <= 18; i++) {
        const ingredient = item[`Hozzavalo_${i}`];
        if (ingredient && ingredient.trim()) {
          convertedData.push({
            'ID': `${receptIndex}_${i}`,
            'Recept_ID': receptIndex + 1,
            '√âlelmiszerek': ingredient.trim(),
            '√âlelmiszer ID': '',
            'Mennyis√©g': 0,
            'M√©rt√©kegys√©g': ''
          });
        }
      }
    });
    
    console.log('‚úÖ Alapanyagok konvert√°lva az Adatb√°zis t√°bl√°b√≥l:', convertedData.length, 'db');
    return convertedData;
  }

  console.log('‚úÖ Recept alapanyag bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë alapanyag p√©lda:', data[0]);
  
  return data;
};

// Alapanyagok lek√©r√©se
export const fetchAlapanyagok = async (): Promise<Alapanyag[]> => {
  console.log('üîÑ Alapanyagok lek√©r√©se...');
  
  const { data, error } = await supabase
    .from('alapanyag')
    .select('*');

  if (error) {
    console.error('‚ùå alapanyag t√°bla lek√©r√©si hiba:', error);
    throw error;
  }

  if (!data || data.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat az alapanyag t√°bl√°ban!');
    return [];
  }

  console.log('‚úÖ Alapanyagok bet√∂ltve:', data.length, 'db');
  console.log('üìã Els≈ë alapanyag p√©lda:', data[0]);
  
  return data;
};

// Jav√≠tott sz√∂veg normaliz√°l√°si f√ºggv√©ny
const normalizeText = (text: string): string => {
  return text
    .toLowerCase()
    .trim()
    .replace(/[√°√†√¢√§]/g, 'a')
    .replace(/[√©√®√™√´]/g, 'e')
    .replace(/[√≠√¨√Æ√Ø]/g, 'i')
    .replace(/[√≥√≤√¥√∂]/g, 'o')
    .replace(/[√∫√π√ª√º]/g, 'u')
    .replace(/[≈ë]/g, 'o')
    .replace(/[≈±]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[√±]/g, 'n')
    .replace(/\s+/g, ' ')
    .replace(/[^\w\s]/g, '');
};

// Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n RECEPTN√âV szerint
const determineMealTypesForRecipe = async (recipeName: string): Promise<string[]> => {
  console.log('üîç Meal types meghat√°roz√°sa recepthez:', recipeName);
  
  const { data: mealTypesData, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek t√°bla lek√©r√©si hiba:', error);
    return [];
  }

  if (!mealTypesData || mealTypesData.length === 0) {
    console.warn('‚ö†Ô∏è √âtkez√©sek t√°bla √ºres!');
    return [];
  }

  console.log('üìä √âtkez√©sek t√°bla adatok:', mealTypesData.length, 'sor');

  const normalizedRecipeName = normalizeText(recipeName);
  const mealTypes: string[] = [];

  // Keres√©s az √âtkez√©sek t√°bl√°ban a recept nev√©vel
  const matchingRows = mealTypesData.filter(row => {
    const rowRecipeName = row['Recept Neve'];
    if (!rowRecipeName) return false;
    
    const normalizedRowName = normalizeText(rowRecipeName);
    
    // T√∂bbf√©le egyez√©s lehet≈ës√©ge
    const exactMatch = normalizedRowName === normalizedRecipeName;
    const recipeContainsRow = normalizedRecipeName.includes(normalizedRowName) && normalizedRowName.length > 3;
    const rowContainsRecipe = normalizedRowName.includes(normalizedRecipeName) && normalizedRecipeName.length > 3;
    
    // Sz√≥k√∂z n√©lk√ºli √∂sszehasonl√≠t√°s is
    const recipeNoSpaces = normalizedRecipeName.replace(/\s/g, '');
    const rowNoSpaces = normalizedRowName.replace(/\s/g, '');
    const noSpaceMatch = recipeNoSpaces === rowNoSpaces;
    
    return exactMatch || recipeContainsRow || rowContainsRecipe || noSpaceMatch;
  });

  console.log(`üîç "${recipeName}" egyez√©sek az √âtkez√©sek t√°bl√°ban:`, matchingRows.length);

  if (matchingRows.length > 0) {
    // T√∂bb egyez√©s eset√©n az √∂sszeset feldolgozzuk
    matchingRows.forEach(matchingRow => {
      console.log(`‚úÖ Tal√°lat: "${recipeName}" ‚Üí "${matchingRow['Recept Neve']}"`);
      
      // Ellen≈ërizz√ºk az √∂sszes √©tkez√©si t√≠pust
      const mealTypeColumns = ['Reggeli', 'T√≠z√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
      
      mealTypeColumns.forEach(mealType => {
        const cellValue = matchingRow[mealType];
        
        // Jobban toler√°ns √©rt√©kellen≈ërz√©s - X vagy x jelzi, hogy az √©tkez√©si t√≠pushoz tartozik
        if (cellValue && (
          cellValue.toString().toLowerCase().includes('x') || 
          cellValue.toString().toLowerCase().includes('igen') || 
          cellValue.toString().toLowerCase().includes('yes') || 
          cellValue === '1' || 
          cellValue === 1 ||
          cellValue === 'X' ||
          cellValue === 'x' ||
          cellValue === true ||
          cellValue === 'true'
        )) {
          const normalizedMealType = mealType.toLowerCase();
          if (!mealTypes.includes(normalizedMealType)) {
            mealTypes.push(normalizedMealType);
            console.log(`‚úÖ "${recipeName}" ‚Üí "${normalizedMealType}" (√©rt√©k: ${cellValue})`);
          }
        }
      });
    });
  } else {
    console.log(`‚ö†Ô∏è "${recipeName}" nem tal√°lhat√≥ az √âtkez√©sek t√°bl√°ban`);
    // Debug: Mutassuk meg az els≈ë 5 recept nevet az √âtkez√©sek t√°bl√°b√≥l
    console.log('üìã Els≈ë 5 recept az √âtkez√©sek t√°bl√°b√≥l:', 
      mealTypesData.slice(0, 5).map(row => `"${row['Recept Neve']}"`));
  }

  return mealTypes;
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öJ adatb√°zis strukt√∫ra bet√∂lt√©se (receptek + recept_alapanyag + alapanyag + √âtkez√©sek)...');
    
    const [receptek, alapanyagokRaw, alapanyagokMaster] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2(),
      fetchAlapanyagok()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagokRaw: alapanyagokRaw.length,
      alapanyagokMaster: alapanyagokMaster.length
    });

    // Ha nincs el√©g adat, ne folytassuk
    if (receptek.length === 0) {
      console.error('‚ùå KRITIKUS: Nincs egyetlen recept sem a receptek t√°bl√°ban!');
      return [];
    }

    // Alapanyag lookup map k√©sz√≠t√©se ID szerint
    const alapanyagMap = new Map<string, Alapanyag>();
    alapanyagokMaster.forEach(alapanyag => {
      alapanyagMap.set(alapanyag.ID.toString(), alapanyag);
    });

    console.log('üìã Alapanyag map m√©rete:', alapanyagMap.size);

    // Debug: N√©zz√ºk meg a receptek √©s alapanyagok ID-jeit
    console.log('üìã Recept ID-k (els≈ë 5):', receptek.slice(0, 5).map(r => r['Recept ID']));
    console.log('üìã Recept nevek (els≈ë 5):', receptek.slice(0, 5).map(r => r['Receptn√©v']));
    console.log('üìã Alapanyag Recept_ID-k (els≈ë 10):', [...new Set(alapanyagokRaw.slice(0, 10).map(a => a['Recept_ID']))]);

    // Csoportos√≠tjuk az alapanyagokat recept ID szerint
    console.log('üîÑ Alapanyagok csoportos√≠t√°sa Recept_ID szerint...');
    const alapanyagokByReceptId = alapanyagokRaw.reduce((acc, alapanyag) => {
      const receptId = alapanyag['Recept_ID'];
      if (!receptId) {
        console.warn('‚ö†Ô∏è Alapanyag Recept_ID n√©lk√ºl:', alapanyag);
        return acc;
      }
      
      if (!acc[receptId]) {
        acc[receptId] = [];
      }
      
      // Alapanyag r√©szletek lek√©r√©se az alapanyag t√°bl√°b√≥l
      const elelmiszerID = alapanyag['√âlelmiszer ID'];
      const elelmiszerNev = alapanyag['√âlelmiszerek'];
      const mennyiseg = alapanyag['Mennyis√©g'] || '';
      const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
      
      // Ha van √âlelmiszer ID, haszn√°ljuk az alapanyag t√°bl√°b√≥l az adatokat
      let finalElelmiszerNev = elelmiszerNev;
      if (elelmiszerID && alapanyagMap.has(elelmiszerID.toString())) {
        const masterAlapanyag = alapanyagMap.get(elelmiszerID.toString())!;
        finalElelmiszerNev = masterAlapanyag.Elelmiszer || elelmiszerNev;
        console.log(`üîó Alapanyag √∂sszekapcsolva: ID ${elelmiszerID} ‚Üí "${finalElelmiszerNev}"`);
      }
      
      // √âp√≠ts√ºk fel a form√°zott alapanyag stringet
      let formattedIngredient = '';
      if (mennyiseg) {
        formattedIngredient += mennyiseg;
      }
      if (mertekegyseg) {
        formattedIngredient += (formattedIngredient ? ' ' : '') + mertekegyseg;
      }
      if (finalElelmiszerNev) {
        formattedIngredient += (formattedIngredient ? ' ' : '') + finalElelmiszerNev;
      }
      
      if (formattedIngredient.trim()) {
        acc[receptId].push(formattedIngredient.trim());
      }
      
      return acc;
    }, {} as Record<number, string[]>);

    console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');
    
    // Mutassuk meg n√©h√°ny p√©ld√°t
    Object.entries(alapanyagokByReceptId).slice(0, 3).forEach(([receptId, ingredients]) => {
      console.log(`üìã Recept ID ${receptId}: ${ingredients.length} alapanyag - ${ingredients.slice(0, 2).join(', ')}${ingredients.length > 2 ? '...' : ''}`);
    });

    // Kombin√°ljuk a recepteket az alapanyagokkal √©s meal type-okkal
    const combinedRecipes: CombinedRecipe[] = [];
    
    console.log('üîÑ Receptek feldolgoz√°sa meal type-okkal...');
    
    for (const recept of receptek) {
      const receptId = recept['Recept ID'];
      const receptName = recept['Receptn√©v'] || 'N√©vtelen recept';
      const hozzavalok = alapanyagokByReceptId[receptId] || [];
      
      console.log(`üîç Recept feldolgoz√°sa: "${receptName}" (ID: ${receptId}) - ${hozzavalok.length} alapanyag`);
      
      // Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n RECEPTN√âV szerint
      const mealTypes = await determineMealTypesForRecipe(receptName);
      
      // MINDEN receptet hozz√°adunk, akkor is, ha nincs meal type-ja
      // Az alapanyagok hi√°nya nem kiz√°r√≥ ok
      combinedRecipes.push({
        id: receptId,
        n√©v: receptName,
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
        feh√©rje: recept['Feherje_g'] || 0,
        zs√≠r: recept['Zsir_g'] || 0,
        hozz√°val√≥k: hozzavalok,
        mealTypes: mealTypes
      });
      
      if (mealTypes.length > 0) {
        console.log(`‚úÖ Recept hozz√°adva meal type-okkal: "${receptName}" - meal types: ${mealTypes.join(', ')}`);
      } else {
        console.log(`‚ö†Ô∏è Recept hozz√°adva meal type n√©lk√ºl: "${receptName}"`);
      }
    }

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva √öJ strukt√∫r√°b√≥l:', combinedRecipes.length);
    console.log('üìä Receptek hozz√°val√≥kkal:', combinedRecipes.filter(r => r.hozz√°val√≥k.length > 0).length);
    console.log('üìä Receptek √©tkez√©si t√≠pussal:', combinedRecipes.filter(r => r.mealTypes.length > 0).length);
    
    // R√©szletes meal type statisztika
    const mealTypeStats = combinedRecipes.reduce((acc, recipe) => {
      recipe.mealTypes.forEach(mealType => {
        acc[mealType] = (acc[mealType] || 0) + 1;
      });
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà Meal type statisztik√°k (√öJ strukt√∫ra):', mealTypeStats);
    
    // Debug: Els≈ë n√©h√°ny recept r√©szletei
    console.log('üìã Els≈ë 3 recept r√©szletei:');
    combinedRecipes.slice(0, 3).forEach(recipe => {
      console.log(`- ${recipe.n√©v}: ${recipe.hozz√°val√≥k.length} alapanyag, ${recipe.mealTypes.length} meal type (${recipe.mealTypes.join(', ')})`);
      if (recipe.hozz√°val√≥k.length > 0) {
        console.log(`  Alapanyagok: ${recipe.hozz√°val√≥k.slice(0, 3).join(', ')}${recipe.hozz√°val√≥k.length > 3 ? '...' : ''}`);
      }
    });
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba (√öJ strukt√∫ra):', error);
    throw error;
  }
};
