
import { supabase } from '@/integrations/supabase/client';
import { ReceptekV2, ReceptAlapanyagV2, CombinedRecipe } from '@/types/newDatabase';

export const fetchReceptekV2 = async (): Promise<ReceptekV2[]> => {
  console.log('üîÑ ReceptekV2 lek√©r√©se...');
  const { data, error } = await supabase
    .from('receptekv2')
    .select('*');

  if (error) {
    console.error('‚ùå ReceptekV2 bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ ReceptekV2 bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

export const fetchReceptAlapanyagV2 = async (): Promise<ReceptAlapanyagV2[]> => {
  console.log('üîÑ Recept alapanyag lek√©r√©se...');
  const { data, error } = await supabase
    .from('recept_alapanyagv2')
    .select('*');

  if (error) {
    console.error('‚ùå Recept alapanyag bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ Recept alapanyag bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

// Fallback: ha az √∫j t√°bl√°k √ºresek, pr√≥b√°ljuk meg a r√©gi adatb√°zisb√≥l bet√∂lteni
export const fetchLegacyRecipes = async () => {
  console.log('üîÑ Fallback: r√©gi adatb√°zis lek√©r√©se...');
  const { data, error } = await supabase
    .from('Adatb√°zis')
    .select('*');

  if (error) {
    console.error('‚ùå R√©gi adatb√°zis bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ R√©gi adatb√°zis bet√∂ltve:', data?.length || 0, 'db');
  return data || [];
};

// Sz√∂veg normaliz√°l√°si f√ºggv√©ny a jobb egyez√©shez
const normalizeText = (text: string): string => {
  return text
    .toLowerCase()
    .trim()
    .replace(/[√°√†√¢√§]/g, 'a')
    .replace(/[√©√®√™√´]/g, 'e')
    .replace(/[√≠√¨√Æ√Ø]/g, 'i')
    .replace(/[√≥√≤√¥√∂]/g, 'o')
    .replace(/[√∫√π√ª√º]/g, 'u')
    .replace(/[≈ë]/g, 'o')
    .replace(/[≈±]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[√±]/g, 'n')
    .replace(/\s+/g, ' ')
    .replace(/[^\w\s]/g, '');
};

// Jav√≠tott funkci√≥: √âtkez√©si t√≠pusok lek√©r√©se √©s receptekhez rendel√©se
export const assignMealTypesToRecipes = async (receptek: ReceptekV2[]): Promise<ReceptekV2[]> => {
  console.log('üîÑ √âtkez√©si t√≠pusok hozz√°rendel√©se receptekhez...');
  
  // Lek√©rj√ºk az √âtkez√©sek t√°bla adatait
  const { data: mealTypesData, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek t√°bla lek√©r√©si hiba:', error);
    return receptek;
  }

  console.log('üìä √âtkez√©sek t√°bla adatai:', mealTypesData?.length || 0, 'sor');

  if (!mealTypesData || mealTypesData.length === 0) {
    console.warn('‚ö†Ô∏è Nincs adat az √âtkez√©sek t√°bl√°ban');
    return receptek;
  }

  // Minden √©tkez√©si t√≠pus sor√°hoz l√©trehozunk egy mapping objektumot
  const mealTypeMapping: Record<string, string[]> = {};
  
  mealTypesData.forEach(row => {
    const recipeName = row['Recept Neve'];
    if (recipeName && recipeName.trim() !== '') {
      // Minden √©tkez√©si t√≠pust ellen≈ërz√ºnk
      const mealTypes = ['Reggeli', 'T√≠z√≥rai', 'Tiz√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
      
      mealTypes.forEach(mealType => {
        const cellValue = row[mealType];
        if (cellValue && (cellValue.toLowerCase().includes('x') || cellValue.toLowerCase().includes('igen'))) {
          const normalizedMealType = mealType.toLowerCase()
            .replace('tiz√≥rai', 't√≠z√≥rai')
            .replace('t√≠z√≥rai', 't√≠z√≥rai');
          
          if (!mealTypeMapping[normalizedMealType]) {
            mealTypeMapping[normalizedMealType] = [];
          }
          mealTypeMapping[normalizedMealType].push(normalizeText(recipeName));
        }
      });
    }
  });

  console.log('üìã Meal type mapping l√©trehozva:', Object.keys(mealTypeMapping).length, '√©tkez√©si t√≠pus');
  Object.entries(mealTypeMapping).forEach(([mealType, recipes]) => {
    console.log(`  ${mealType}: ${recipes.length} recept`);
  });

  // Friss√≠tj√ºk a recepteket a meal_type mez≈ëvel
  const updatedReceptek = receptek.map(recept => {
    const receptName = normalizeText(recept['Receptn√©v'] || '');
    let assignedMealType = '';

    // Keress√ºk meg, hogy melyik √©tkez√©si t√≠pushoz tartozik ez a recept
    for (const [mealType, recipeNames] of Object.entries(mealTypeMapping)) {
      const hasMatch = recipeNames.some(normalizedName => {
        // T√∂bb t√≠pus√∫ egyez√©s ellen≈ërz√©se
        return normalizedName === receptName || // Pontos egyez√©s
               normalizedName.includes(receptName) || // Tartalmazza
               receptName.includes(normalizedName) || // Ford√≠tott tartalmaz√°s
               // R√©szleges sz√≥egyez√©s
               normalizedName.split(' ').some(word => 
                 word.length > 3 && receptName.includes(word)
               ) ||
               receptName.split(' ').some(word => 
                 word.length > 3 && normalizedName.includes(word)
               );
      });
      
      if (hasMatch) {
        assignedMealType = mealType;
        break;
      }
    }

    if (assignedMealType) {
      console.log(`‚úÖ "${recept['Receptn√©v']}" ‚Üí ${assignedMealType}`);
    } else {
      console.log(`‚ö†Ô∏è "${recept['Receptn√©v']}" nem tal√°lhat√≥ az √âtkez√©sek t√°bl√°ban`);
    }

    return {
      ...recept,
      meal_type: assignedMealType || null
    };
  });

  const assignedCount = updatedReceptek.filter(r => r.meal_type).length;
  console.log(`üìä √ñsszesen ${assignedCount}/${updatedReceptek.length} recepthez rendelve √©tkez√©si t√≠pus`);

  return updatedReceptek;
};

export const fetchCombinedRecipes = async (): Promise<CombinedRecipe[]> => {
  try {
    console.log('üîÑ √öj adatb√°zis strukt√∫ra bet√∂lt√©se...');
    
    const [receptek, alapanyagok] = await Promise.all([
      fetchReceptekV2(),
      fetchReceptAlapanyagV2()
    ]);

    console.log('üìä Bet√∂lt√∂tt adatok:', {
      receptek: receptek.length,
      alapanyagok: alapanyagok.length
    });

    // KRITIKUS: Csak az √∫j t√°bl√°k adatait haszn√°ljuk, nincs fallback
    if (receptek.length === 0) {
      console.warn('‚ö†Ô∏è √öj t√°bl√°k √ºresek, de NEM haszn√°ljuk a fallback-et!');
      return [];
    }

    // Hozz√°rendelj√ºk az √©tkez√©si t√≠pusokat
    const receptekWithMealTypes = await assignMealTypesToRecipes(receptek);

    // Csoportos√≠tjuk az alapanyagokat recept ID szerint
    const alapanyagokByReceptId = alapanyagok.reduce((acc, alapanyag) => {
      const receptId = alapanyag['Recept_ID'];
      if (!acc[receptId]) {
        acc[receptId] = [];
      }
      
      // JAV√çT√ÅS: Pontosan form√°zott alapanyag string a t√°bl√°ban tal√°lhat√≥ adatok alapj√°n
      const mennyiseg = alapanyag['Mennyis√©g'] || '';
      const mertekegyseg = alapanyag['M√©rt√©kegys√©g'] || '';
      const elelmiszer = alapanyag['√âlelmiszerek'] || '';
      
      const formattedIngredient = `${mennyiseg} ${mertekegyseg} ${elelmiszer}`.trim();
      if (formattedIngredient && formattedIngredient !== '  ') {
        acc[receptId].push(formattedIngredient);
      }
      
      return acc;
    }, {} as Record<number, string[]>);

    console.log('üìä Alapanyagok csoportos√≠tva:', Object.keys(alapanyagokByReceptId).length, 'recept ID-hoz');

    // Kombin√°ljuk a recepteket az alapanyagokkal
    const combinedRecipes: CombinedRecipe[] = receptekWithMealTypes.map(recept => {
      const receptId = recept['Recept ID'];
      const hozzavalok = alapanyagokByReceptId[receptId] || [];
      
      if (hozzavalok.length === 0) {
        console.warn(`‚ö†Ô∏è Nincs alapanyag a ${receptId} ID-j√∫ recepthez: ${recept['Receptn√©v']}`);
      }
      
      return {
        id: receptId,
        n√©v: recept['Receptn√©v'] || 'N√©vtelen recept',
        elk√©sz√≠t√©s: recept['Elk√©sz√≠t√©se'] || 'Nincs le√≠r√°s',
        k√©p: recept['K√©p'] || '',
        sz√©nhidr√°t: recept['Szenhidrat_g'] || 0,
        feh√©rje: recept['Feherje_g'] || 0,
        zs√≠r: recept['Zsir_g'] || 0,
        hozz√°val√≥k: hozzavalok,
        mealType: recept.meal_type || undefined // Hozz√°adjuk a meal type-ot
      };
    });

    console.log('‚úÖ Kombin√°lt receptek l√©trehozva:', combinedRecipes.length);
    console.log('üìä Receptek hozz√°val√≥kkal:', combinedRecipes.filter(r => r.hozz√°val√≥k.length > 0).length);
    console.log('üìä Receptek √©tkez√©si t√≠pussal:', combinedRecipes.filter(r => r.mealType).length);
    
    // R√©szletes meal type statisztika
    const mealTypeStats = combinedRecipes.reduce((acc, recipe) => {
      if (recipe.mealType) {
        acc[recipe.mealType] = (acc[recipe.mealType] || 0) + 1;
      }
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà Meal type statisztik√°k:', mealTypeStats);
    
    return combinedRecipes;
  } catch (error) {
    console.error('‚ùå Kombin√°lt receptek bet√∂lt√©si hiba:', error);
    throw error;
  }
};
