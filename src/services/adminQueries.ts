
import { supabase } from '@/integrations/supabase/client';

export interface AdminUserOverview {
  id: string;
  email: string;
  user_created_at: string;
  full_name: string | null;
  age: number | null;
  weight: number | null;
  height: number | null;
  activity_level: string | null;
  dietary_preferences: string[] | null;
  allergies: string[] | null;
  avatar_url: string | null;
  role: 'admin' | 'user' | null;
  favorites_count: number;
  preferences_count: number;
  ratings_count: number;
}

export const checkIsAdmin = async (userId: string): Promise<boolean> => {
  try {
    console.log('üîç Admin ellen≈ërz√©s:', { userId });
    
    const { data, error } = await supabase.rpc('is_admin', { user_id: userId });
    
    if (error) {
      console.error('Admin ellen≈ërz√©si hiba:', error);
      return false;
    }
    
    console.log('‚úÖ Admin st√°tusz:', { userId, isAdmin: data });
    return data || false;
  } catch (error) {
    console.error('Admin ellen≈ërz√©si kiv√©tel:', error);
    return false;
  }
};

export const fetchAllUsers = async (): Promise<AdminUserOverview[]> => {
  try {
    console.log('üìä √ñsszes felhaszn√°l√≥ bet√∂lt√©se...');
    
    const { data, error } = await supabase
      .from('admin_user_overview')
      .select('*')
      .order('user_created_at', { ascending: false });

    if (error) {
      console.error('Felhaszn√°l√≥k bet√∂lt√©si hiba:', error);
      throw error;
    }

    console.log('‚úÖ Felhaszn√°l√≥k bet√∂ltve:', { count: data?.length || 0 });
    return data || [];
  } catch (error) {
    console.error('Felhaszn√°l√≥k bet√∂lt√©si kiv√©tel:', error);
    throw error;
  }
};

export const searchUsers = async (searchTerm: string): Promise<AdminUserOverview[]> => {
  try {
    console.log('üîç Felhaszn√°l√≥k keres√©se:', { searchTerm });
    
    const { data, error } = await supabase
      .from('admin_user_overview')
      .select('*')
      .or(`email.ilike.%${searchTerm}%,full_name.ilike.%${searchTerm}%`)
      .order('user_created_at', { ascending: false });

    if (error) {
      console.error('Felhaszn√°l√≥k keres√©si hiba:', error);
      throw error;
    }

    console.log('‚úÖ Keres√©si eredm√©ny:', { count: data?.length || 0 });
    return data || [];
  } catch (error) {
    console.error('Felhaszn√°l√≥k keres√©si kiv√©tel:', error);
    throw error;
  }
};

export const assignAdminRole = async (email: string, assignedBy: string) => {
  try {
    console.log('üëë Admin szerepk√∂r kioszt√°sa:', { email, assignedBy });
    
    // El≈ësz√∂r megkeress√ºk a felhaszn√°l√≥t email alapj√°n
    const { data: userData, error: userError } = await supabase
      .from('admin_user_overview')
      .select('id')
      .eq('email', email)
      .single();

    if (userError || !userData) {
      console.error('Felhaszn√°l√≥ nem tal√°lhat√≥:', { email, error: userError });
      throw new Error('Nem tal√°lhat√≥ felhaszn√°l√≥ ezzel az email c√≠mmel');
    }

    const { error } = await supabase
      .from('user_roles')
      .insert({
        user_id: userData.id,
        role: 'admin',
        assigned_by: assignedBy
      });

    if (error) {
      if (error.code === '23505') { // unique constraint violation
        throw new Error('Ez a felhaszn√°l√≥ m√°r admin jogosults√°ggal rendelkezik');
      }
      console.error('Admin szerepk√∂r kioszt√°si hiba:', error);
      throw error;
    }

    console.log('‚úÖ Admin szerepk√∂r sikeresen kiosztva:', { email });
    return true;
  } catch (error) {
    console.error('Admin szerepk√∂r kioszt√°si kiv√©tel:', error);
    throw error;
  }
};

export const removeAdminRole = async (userId: string) => {
  try {
    console.log('‚ùå Admin szerepk√∂r megvon√°sa:', { userId });
    
    const { error } = await supabase
      .from('user_roles')
      .delete()
      .eq('user_id', userId)
      .eq('role', 'admin');

    if (error) {
      console.error('Admin szerepk√∂r elt√°vol√≠t√°si hiba:', error);
      throw error;
    }

    console.log('‚úÖ Admin szerepk√∂r sikeresen megvonva:', { userId });
    return true;
  } catch (error) {
    console.error('Admin szerepk√∂r elt√°vol√≠t√°si kiv√©tel:', error);
    throw error;
  }
};

export const getUserDetails = async (userId: string) => {
  try {
    console.log('üìã Felhaszn√°l√≥ r√©szletek bet√∂lt√©se:', { userId });
    
    // Felhaszn√°l√≥ alapadatai
    const { data: user, error: userError } = await supabase
      .from('admin_user_overview')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError) {
      console.error('Felhaszn√°l√≥ adatok bet√∂lt√©si hiba:', userError);
      throw userError;
    }

    // Kedvencek
    const { data: favorites, error: favError } = await supabase
      .from('favorites')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    // Preferenci√°k
    const { data: preferences, error: prefError } = await supabase
      .from('√âtelpreferenci√°k')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    console.log('‚úÖ Felhaszn√°l√≥ r√©szletek bet√∂ltve:', { 
      userId, 
      favorites: favorites?.length || 0, 
      preferences: preferences?.length || 0 
    });

    return {
      user,
      favorites: favorites || [],
      preferences: preferences || [],
      favoritesError: favError,
      preferencesError: prefError
    };
  } catch (error) {
    console.error('Felhaszn√°l√≥ r√©szletek bet√∂lt√©si kiv√©tel:', error);
    throw error;
  }
};
