
import { supabase } from '@/integrations/supabase/client';
import { fetchCombinedRecipes } from './newDatabaseQueries';
import { SupabaseRecipe } from '@/types/supabase';

export const fetchCategories = async () => {
  console.log('üîÑ Kateg√≥ri√°k bet√∂lt√©se √∫j t√°bl√°b√≥l...');
  const { data, error } = await supabase
    .from('√âtelkateg√≥ri√°k_√öj')
    .select('*');

  if (error) {
    console.error('‚ùå Kateg√≥ri√°k bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ Kateg√≥ri√°k bet√∂ltve:', data?.length || 0, 'db');
  return data;
};

export const fetchMealTypes = async () => {
  console.log('üîÑ √âtkez√©sek bet√∂lt√©se...');
  const { data, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek bet√∂lt√©si hiba:', error);
    throw error;
  }

  console.log('‚úÖ √âtkez√©sek bet√∂ltve:', data?.length || 0, 'db');
  return data;
};

// FALLBACK: Ha az √∫j t√°bl√°k √ºresek, haszn√°ljuk a r√©git
export const fetchRecipes = async () => {
  console.log('üîÑ Receptek bet√∂lt√©se - el≈ësz√∂r √∫j t√°bl√°k, majd fallback...');
  
  try {
    // Pr√≥b√°ljuk az √∫j strukt√∫r√°t
    const newRecipes = await fetchCombinedRecipes();
    
    if (newRecipes && newRecipes.length > 0) {
      console.log('‚úÖ √öj t√°bl√°kb√≥l sikeresen bet√∂ltve:', newRecipes.length, 'recept');
      return newRecipes;
    }
    
    console.log('‚ö†Ô∏è √öj t√°bl√°k √ºresek, fallback a r√©gi Adatb√°zis t√°bl√°ra...');
    
    // Fallback a r√©gi t√°bl√°ra
    const { data: oldRecipes, error } = await supabase
      .from('Adatb√°zis')
      .select('*');

    if (error) {
      console.error('‚ùå R√©gi adatb√°zis bet√∂lt√©si hiba:', error);
      throw error;
    }
    
    console.log('‚úÖ R√©gi t√°bl√°b√≥l bet√∂ltve:', oldRecipes?.length || 0, 'recept');
    
    if (!oldRecipes || oldRecipes.length === 0) {
      console.warn('‚ö†Ô∏è Mindk√©t t√°bla √ºres!');
      return [];
    }
    
    // Konvert√°ljuk a r√©gi form√°tumot az √∫j form√°tumra
    const convertedRecipes = await convertOldRecipesToNew(oldRecipes);
    console.log('‚úÖ Konvert√°lt receptek:', convertedRecipes.length, 'db');
    
    return convertedRecipes;
    
  } catch (error) {
    console.error('‚ùå Receptek bet√∂lt√©si hiba:', error);
    throw error;
  }
};

// Konvert√°l√≥ f√ºggv√©ny a r√©gi form√°tumb√≥l az √∫jba
const convertOldRecipesToNew = async (oldRecipes: SupabaseRecipe[]) => {
  console.log('üîÑ R√©gi receptek konvert√°l√°sa √∫j form√°tumra...');
  
  const convertedRecipes = [];
  
  for (const oldRecipe of oldRecipes) {
    if (!oldRecipe['Recept_Neve']) continue;
    
    // Hozz√°val√≥k √∂sszegy≈±jt√©se
    const ingredients = [
      oldRecipe['Hozzavalo_1'], oldRecipe['Hozzavalo_2'], oldRecipe['Hozzavalo_3'],
      oldRecipe['Hozzavalo_4'], oldRecipe['Hozzavalo_5'], oldRecipe['Hozzavalo_6'],
      oldRecipe['Hozzavalo_7'], oldRecipe['Hozzavalo_8'], oldRecipe['Hozzavalo_9'],
      oldRecipe['Hozzavalo_10'], oldRecipe['Hozzavalo_11'], oldRecipe['Hozzavalo_12'],
      oldRecipe['Hozzavalo_13'], oldRecipe['Hozzavalo_14'], oldRecipe['Hozzavalo_15'],
      oldRecipe['Hozzavalo_16'], oldRecipe['Hozzavalo_17'], oldRecipe['Hozzavalo_18']
    ].filter(Boolean);
    
    // Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n
    const mealTypes = await determineMealTypesForRecipe(oldRecipe['Recept_Neve']);
    
    const convertedRecipe = {
      id: Math.floor(Math.random() * 1000000), // Gener√°lt ID
      n√©v: oldRecipe['Recept_Neve'],
      elk√©sz√≠t√©s: oldRecipe['Elk√©sz√≠t√©s'] || 'Nincs le√≠r√°s',
      k√©p: oldRecipe['K√©p URL'] || '',
      sz√©nhidr√°t: oldRecipe['Szenhidrat_g'] || 0,
      feh√©rje: oldRecipe['Feherje_g'] || 0,
      zs√≠r: oldRecipe['Zsir_g'] || 0,
      hozz√°val√≥k: ingredients,
      mealTypes: mealTypes
    };
    
    convertedRecipes.push(convertedRecipe);
  }
  
  return convertedRecipes;
};

// Meal types meghat√°roz√°sa az √âtkez√©sek t√°bla alapj√°n (m√°solva az √∫j queryb≈ël)
const determineMealTypesForRecipe = async (recipeName: string): Promise<string[]> => {
  console.log('üîç Meal types meghat√°roz√°sa recepthez:', recipeName);
  
  const { data: mealTypesData, error } = await supabase
    .from('√âtkez√©sek')
    .select('*');

  if (error) {
    console.error('‚ùå √âtkez√©sek t√°bla lek√©r√©si hiba:', error);
    return [];
  }

  const normalizedRecipeName = normalizeText(recipeName);
  const mealTypes: string[] = [];

  // Keress√ºk meg a recept nev√©t az √âtkez√©sek t√°bl√°ban
  const matchingRow = mealTypesData?.find(row => {
    const rowRecipeName = row['Recept Neve'];
    if (!rowRecipeName) return false;
    
    const normalizedRowName = normalizeText(rowRecipeName);
    
    // Pontosabb egyez√©s ellen≈ërz√©se
    const exactMatch = normalizedRowName === normalizedRecipeName;
    const containsMatch = normalizedRowName.includes(normalizedRecipeName) || 
                         normalizedRecipeName.includes(normalizedRowName);
    
    // Sz√≥-alap√∫ egyez√©s
    const recipeWords = normalizedRecipeName.split(' ').filter(word => word.length > 2);
    const nameWords = normalizedRowName.split(' ').filter(word => word.length > 2);
    
    const wordMatch = recipeWords.length > 0 && nameWords.length > 0 && 
      recipeWords.some(word => nameWords.some(nameWord => 
        word.includes(nameWord) || nameWord.includes(word) ||
        Math.abs(word.length - nameWord.length) <= 2
      ));
    
    return exactMatch || containsMatch || wordMatch;
  });

  if (matchingRow) {
    console.log(`‚úÖ Tal√°lat az √âtkez√©sek t√°bl√°ban: "${recipeName}"`);
    
    // Ellen≈ërizz√ºk az √∂sszes √©tkez√©si t√≠pust
    const mealTypeColumns = ['Reggeli', 'T√≠z√≥rai', 'Eb√©d', 'Uzsonna', 'Vacsora', 'Leves', 'El≈ë√©tel', 'Desszert', 'K√∂ret'];
    
    mealTypeColumns.forEach(mealType => {
      const cellValue = matchingRow[mealType];
      if (cellValue && (
        cellValue.toLowerCase().includes('x') || 
        cellValue.toLowerCase().includes('igen') || 
        cellValue === '1' || 
        cellValue === 1
      )) {
        const normalizedMealType = mealType.toLowerCase();
        mealTypes.push(normalizedMealType);
        console.log(`‚úÖ "${recipeName}" hozz√°adva "${normalizedMealType}" t√≠pushoz`);
      }
    });
  } else {
    console.log(`‚ö†Ô∏è "${recipeName}" nem tal√°lhat√≥ az √âtkez√©sek t√°bl√°ban`);
  }

  return mealTypes;
};

// Sz√∂veg normaliz√°l√°si f√ºggv√©ny
const normalizeText = (text: string): string => {
  return text
    .toLowerCase()
    .trim()
    .replace(/[√°√†√¢√§]/g, 'a')
    .replace(/[√©√®√™√´]/g, 'e')
    .replace(/[√≠√¨√Æ√Ø]/g, 'i')
    .replace(/[√≥√≤√¥√∂]/g, 'o')
    .replace(/[√∫√π√ª√º]/g, 'u')
    .replace(/[≈ë]/g, 'o')
    .replace(/[≈±]/g, 'u')
    .replace(/[√ß]/g, 'c')
    .replace(/[√±]/g, 'n')
    .replace(/\s+/g, ' ')
    .replace(/[^\w\s]/g, '');
};

export const saveRecipeRating = async (recipeName: string, rating: number, userId: string) => {
  const { error } = await supabase
    .from('√ârt√©kel√©sek')
    .insert({
      'Recept neve': recipeName,
      '√ârt√©kel√©s': rating.toString(),
      'D√°tum': new Date().toISOString(),
      'user_id': userId
    });

  if (error) {
    console.error('√ârt√©kel√©s ment√©si hiba:', error);
    throw error;
  }

  return true;
};
