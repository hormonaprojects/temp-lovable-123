import { supabase } from '@/integrations/supabase/client';
import { CombinedRecipe } from './database/types';
import { UserPreference } from './preferenceFilters';

// √öJ INTERF√âSZEK
export interface NewIngredient {
  id: string;
  Elelmiszer_nev: string;
  Hozzarendelt_ID: string;
  Kategoria_ID: number;
  Kep?: string;
}

export interface IngredientCategory {
  Kategoria_ID: number;
  Kategoriak: string;
}

export interface UserIngredientPreference {
  ingredient: string;
  category: string;
  preference: 'like' | 'dislike' | 'neutral';
  favorite: boolean;
}

// CACHE az √©lelmiszer adatokhoz
let ingredientsCache: NewIngredient[] | null = null;
let categoriesCache: IngredientCategory[] | null = null;

// F≈êBB FUNKCI√ìK

/**
 * Bet√∂lti az √∂sszes √©lelmiszer adatot cache-szel
 */
export const fetchNewIngredients = async (): Promise<NewIngredient[]> => {
  if (ingredientsCache) {
    console.log('üìã √âlelmiszer cache haszn√°lat:', ingredientsCache.length, 'elem');
    return ingredientsCache;
  }

  try {
    console.log('üîÑ √âlelmiszer adatok bet√∂lt√©se...');
    const { data, error } = await supabase
      .from('elelmiszer_kep')
      .select('*')
      .order('Elelmiszer_nev', { ascending: true });

    if (error) {
      console.error('‚ùå √âlelmiszer adatok bet√∂lt√©si hiba:', error);
      return [];
    }

    // Adattranszform√°ci√≥
    ingredientsCache = (data || []).map(item => ({
      id: item.Elelmiszer_nev, // Haszn√°ljuk a nevet ID-k√©nt
      Elelmiszer_nev: item.Elelmiszer_nev,
      Hozzarendelt_ID: item.Hozzarendelt_ID || '',
      Kategoria_ID: item.Kategoria_ID || 0,
      Kep: item.Kep || ''
    }));

    console.log('‚úÖ √âlelmiszer adatok bet√∂ltve:', ingredientsCache.length, 'elem');
    return ingredientsCache;
  } catch (error) {
    console.error('‚ùå √âlelmiszer adatok bet√∂lt√©si hiba:', error);
    return [];
  }
};

/**
 * Bet√∂lti az √©lelmiszer kateg√≥ri√°kat cache-szel
 */
export const fetchIngredientCategories = async (): Promise<IngredientCategory[]> => {
  if (categoriesCache) {
    console.log('üìã Kateg√≥ria cache haszn√°lat:', categoriesCache.length, 'elem');
    return categoriesCache;
  }

  try {
    console.log('üîÑ Kateg√≥ria adatok bet√∂lt√©se...');
    const { data, error } = await supabase
      .from('elelmiszer_kategoriak')
      .select('*')
      .order('Kategoriak', { ascending: true });

    if (error) {
      console.error('‚ùå Kateg√≥ria adatok bet√∂lt√©si hiba:', error);
      return [];
    }

    categoriesCache = data || [];
    console.log('‚úÖ Kateg√≥ria adatok bet√∂ltve:', categoriesCache.length, 'elem');
    return categoriesCache;
  } catch (error) {
    console.error('‚ùå Kateg√≥ria adatok bet√∂lt√©si hiba:', error);
    return [];
  }
};

/**
 * Megkeresi az √©lelmiszer adatot a Hozzarendelt_ID alapj√°n
 */
export const findIngredientByAssignedId = async (assignedId: string): Promise<NewIngredient | null> => {
  const ingredients = await fetchNewIngredients();
  return ingredients.find(ingredient => ingredient.Hozzarendelt_ID === assignedId) || null;
};

/**
 * Megkeresi az √©lelmiszer adatot n√©v alapj√°n
 */
export const findIngredientByName = async (name: string): Promise<NewIngredient | null> => {
  const ingredients = await fetchNewIngredients();
  return ingredients.find(ingredient => 
    ingredient.Elelmiszer_nev.toLowerCase().trim() === name.toLowerCase().trim()
  ) || null;
};

/**
 * KRITIKUS SZ≈∞R√âSI LOGIKA: Receptek sz≈±r√©se √©lelmiszer nevek alapj√°n
 * 1. Felhaszn√°l√≥ kiv√°lasztja: ["paradicsom", "hagyma"]
 * 2. elelmiszer_kep t√°bl√°ban keres√©s: "paradicsom" -> Hozzarendelt_ID: "123"
 * 3. Receptekn√©l: recipe.hozzarendeltId = "123,456,789"
 * 4. Tal√°lat: "123" benne van -> recept megjelen√≠t√©se
 */
export const filterRecipesByNewIngredientNames = async (
  recipes: CombinedRecipe[],
  selectedIngredientNames: string[]
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ √öJ sz≈±r√©s ind√≠t√°sa ingredient nevekkel...');
  console.log('üìã Kiv√°lasztott ingrediensek:', selectedIngredientNames);
  console.log('üìä Receptek sz√°ma:', recipes.length);

  if (selectedIngredientNames.length === 0) {
    console.log('üìù Nincs kiv√°lasztott ingredient, minden receptet visszaadunk');
    return recipes;
  }

  // 1. Bet√∂ltj√ºk az √©lelmiszer adatokat
  const ingredients = await fetchNewIngredients();
  
  // 2. Megkeress√ºk a kiv√°lasztott ingrediensek Hozzarendelt_ID-jait
  const selectedIds: string[] = [];
  
  for (const ingredientName of selectedIngredientNames) {
    const ingredient = ingredients.find(ing => 
      ing.Elelmiszer_nev.toLowerCase().trim() === ingredientName.toLowerCase().trim()
    );
    
    if (ingredient && ingredient.Hozzarendelt_ID) {
      selectedIds.push(ingredient.Hozzarendelt_ID);
      console.log(`üîç "${ingredientName}" -> ID: ${ingredient.Hozzarendelt_ID}`);
    } else {
      console.warn(`‚ö†Ô∏è Nem tal√°lhat√≥ ingredient: "${ingredientName}"`);
    }
  }

  console.log('üÜî Kiv√°lasztott ID-k:', selectedIds);

  if (selectedIds.length === 0) {
    console.log('‚ö†Ô∏è Nincs √©rv√©nyes ID, minden receptet visszaadunk');
    return recipes;
  }

  // 3. Sz≈±rj√ºk a recepteket
  const filteredRecipes = recipes.filter(recipe => {
    if (!recipe.hozzarendeltId) {
      return false;
    }
    
    // Vessz≈ëvel elv√°lasztott ID-k sz√©tbont√°sa
    const recipeIds = recipe.hozzarendeltId.split(',').map(id => id.trim()).filter(id => id);
    
    // Ellen≈ërizz√ºk, hogy legal√°bb egy kiv√°lasztott ID benne van-e
    const hasMatch = selectedIds.some(selectedId => recipeIds.includes(selectedId));
    
    if (hasMatch) {
      console.log(`‚úÖ Recept "${recipe.n√©v}" MATCH - IDs: [${recipeIds.join(', ')}]`);
    }
    
    return hasMatch;
  });

  console.log('‚úÖ Sz≈±rt receptek sz√°ma:', filteredRecipes.length);
  return filteredRecipes;
};

/**
 * Receptek sz≈±r√©se NewIngredient objektumok alapj√°n
 */
export const filterRecipesByNewIngredients = async (
  recipes: CombinedRecipe[],
  selectedIngredients: NewIngredient[]
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ √öJ sz≈±r√©s ind√≠t√°sa ingredient objektumokkal...');
  
  const ingredientNames = selectedIngredients.map(ing => ing.Elelmiszer_nev);
  return await filterRecipesByNewIngredientNames(recipes, ingredientNames);
};

/**
 * R√©gi preferenci√°k √°talak√≠t√°sa az √∫j rendszerre
 */
export const convertToNewUserPreferences = async (
  oldPreferences: UserPreference[]
): Promise<UserIngredientPreference[]> => {
  console.log('üîÑ R√©gi preferenci√°k √°talak√≠t√°sa...');
  console.log('üìã R√©gi preferenci√°k sz√°ma:', oldPreferences.length);

  const ingredients = await fetchNewIngredients();
  const converted: UserIngredientPreference[] = [];

  for (const oldPref of oldPreferences) {
    // Megkeress√ºk az √∫j rendszerben
    const ingredient = ingredients.find(ing => 
      ing.Elelmiszer_nev.toLowerCase().trim() === oldPref.ingredient.toLowerCase().trim()
    );

    if (ingredient) {
      converted.push({
        ingredient: ingredient.Elelmiszer_nev,
        category: oldPref.category,
        preference: oldPref.preference,
        favorite: false // Alap√©rtelmezett
      });
    } else {
      console.warn(`‚ö†Ô∏è Nem tal√°lhat√≥ √∫j ingredient: "${oldPref.ingredient}"`);
    }
  }

  console.log('‚úÖ √Åtalak√≠tott preferenci√°k sz√°ma:', converted.length);
  return converted;
};

/**
 * WRAPPER funkci√≥: Receptek sz≈±r√©se preferenci√°k alapj√°n
 * Ez a main entry point az √∫j sz≈±r√©si logik√°hoz
 */
export const filterRecipesByPreferencesAdapter = async (
  recipes: CombinedRecipe[],
  userPreferences: UserPreference[]
): Promise<CombinedRecipe[]> => {
  console.log('üéØ ADAPTER: Preferencia alap√∫ sz≈±r√©s kezd≈ëdik...');
  console.log('üìä Input receptek:', recipes.length);
  console.log('üìã User preferenci√°k:', userPreferences.length);

  // Sz≈±rj√ºk a "like" preferenci√°kat
  const likedIngredients = userPreferences
    .filter(pref => pref.preference === 'like')
    .map(pref => pref.ingredient);

  console.log('üíö Kedvelt ingrediensek:', likedIngredients);

  if (likedIngredients.length === 0) {
    console.log('üìù Nincs kedvelt ingredient, minden receptet visszaadunk');
    return recipes;
  }

  // √öJ ID-alap√∫ sz≈±r√©s haszn√°lata
  const filteredRecipes = await filterRecipesByNewIngredientNames(recipes, likedIngredients);
  
  console.log('‚úÖ ADAPTER eredm√©ny:', filteredRecipes.length, 'recept');
  return filteredRecipes;
};

/**
 * Cache tiszt√≠t√°sa (fejleszt√©shez/tesztel√©shez)
 */
export const clearCache = () => {
  console.log('üßπ Cache tiszt√≠t√°sa...');
  ingredientsCache = null;
  categoriesCache = null;
};