import { CombinedRecipe } from './database/types';
import { findIngredientByName } from './newIngredientQueries';
import { supabase } from '../integrations/supabase/client';

export const filterRecipesByPreferencesAdapter = async (
  recipes: CombinedRecipe[],
  selectedIngredientNames: string[],
  userId?: string
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ √öJ preferencia adapter sz≈±r√©s ID alapj√°n');
  console.log('üìä Receptek sz√°ma:', recipes.length);
  console.log('ü•ï Kiv√°lasztott alapanyagok:', selectedIngredientNames);

  if (selectedIngredientNames.length === 0) {
    console.log('‚úÖ Nincs sz≈±r√©s - minden receptet visszaadok');
    return recipes;
  }

  const assignedIds: string[] = [];

  // N√©v -> Hozzarendelt_ID konverzi√≥
  for (const name of selectedIngredientNames) {
    const ingredient = await findIngredientByName(name);
    
    if (ingredient?.Hozzarendelt_ID) {
      // A Hozzarendelt_ID lehet t√∂bb ID is vessz≈ëvel elv√°lasztva
      const ids = ingredient.Hozzarendelt_ID.split(',').map(id => id.trim());
      assignedIds.push(...ids);
      console.log(`‚úÖ ${name} -> ID(k): ${ingredient.Hozzarendelt_ID}`);
    } else {
      console.warn(`‚ùå Nincs ID tal√°lat: ${name}`);
    }
  }

  console.log('üîó √ñsszegy≈±jt√∂tt ID-k:', assignedIds);

  if (assignedIds.length === 0) {
    console.warn('‚ö†Ô∏è Nincs egyetlen ID sem - √ºres eredm√©ny');
    return [];
  }

  // Most a recept_alapanyag t√°bl√°b√≥l keress√ºk meg, mely receptek tartalmazz√°k ezeket az ID-kat
  try {
    const recipeIngredients: any[] = [];
    
    // Lek√©rj√ºk az √∂sszes recept_alapanyag bejegyz√©st √©s sz≈±rj√ºk ≈ëket
    const response = await supabase
      .from('recept_alapanyag')
      .select('Recept_ID, "√âlelmiszer ID"');

    if (response.error) {
      console.error('‚ùå Hiba a recept_alapanyag lek√©rdez√©sekor:', response.error);
      return [];
    }

    if (response.data) {
      // Sz≈±rj√ºk azokat, amelyek tartalmazz√°k valamelyik assignedId-t
      for (const row of response.data) {
        const elelmiszerId = (row as any)['√âlelmiszer ID'];
        if (elelmiszerId && assignedIds.includes(elelmiszerId.toString())) {
          recipeIngredients.push(row);
        }
      }
    }

    console.log('üîç Tal√°lat a recept_alapanyag t√°bl√°ban:', recipeIngredients.length, 'db');

    if (recipeIngredients.length === 0) {
      console.warn('‚ö†Ô∏è Nincs tal√°lat a recept_alapanyag t√°bl√°ban');
      return [];
    }

    // Egyedi Recept_ID-k √∂sszegy≈±jt√©se  
    const matchingRecipeIds = [...new Set(recipeIngredients.map(ri => ri.Recept_ID))];
    console.log('üéØ Matching Recept_ID-k:', matchingRecipeIds);

    // Receptek sz≈±r√©se a matching Recept_ID-k alapj√°n
    const filtered = recipes.filter(recipe => {
      return matchingRecipeIds.includes(recipe.id);
    });

    console.log(`üìä Sz≈±r√©s eredm√©nye: ${filtered.length}/${recipes.length} recept`);
    
    if (filtered.length > 0) {
      console.log('üçΩÔ∏è Sz≈±rt receptek:', filtered.map(r => r.n√©v));
    }

    return filtered;

  } catch (error) {
    console.error('‚ùå Hiba az ID alap√∫ sz≈±r√©s sor√°n:', error);
    return [];
  }
};

export const filterRecipesByIngredientIds = async (
  recipes: CombinedRecipe[],
  assignedIds: string[]
): Promise<CombinedRecipe[]> => {
  console.log('üîÑ Receptek sz≈±r√©se ID lista alapj√°n:', assignedIds);

  const filtered = recipes.filter(recipe => {
    if (!recipe.Hozzarendelt_ID) return false;
    
    const recipeIds = recipe.Hozzarendelt_ID.split(',').map(id => id.trim());
    return assignedIds.some(id => recipeIds.includes(id));
  });

  console.log(`üìä ID sz≈±r√©s eredm√©nye: ${filtered.length}/${recipes.length} recept`);
  return filtered;
};